import{Schema as e,model as t,connect as n}from"mongoose";import"dotenv/config";import a,{Router as s}from"express";import o from"cors";import r from"morgan";import i from"swagger-ui-express";import u from"swagger-jsdoc";import{fileURLToPath as d}from"url";import c,{dirname as l,join as p}from"path";import{caching as m}from"cache-manager";import y from"jsonwebtoken";import g from"nodemailer";import f from"axios";import w from"node-schedule";import b from"multer";const A=t("Game",new e({name:{type:String,required:!0},uniqueId:{type:Number,default:0},open:{type:String,required:!0},close:{type:String},canPlaceBetonOpen:{type:Boolean,default:!0},canPlaceBetonClose:{type:Boolean,default:!0},openResult:{type:Number,default:5e3},combination:{type:Number,default:5e3},closeResult:{type:Number,default:5e3},openAnk:{type:Number,default:5e3},closeAnk:{type:Number,default:5e3},category:{type:String,default:"m"},status:{type:String,default:"active"},lock:{type:Boolean,default:!1},sunday:{type:Boolean,default:!0},monday:{type:Boolean,default:!0},tuesday:{type:Boolean,default:!0},wednesday:{type:Boolean,default:!0},thursday:{type:Boolean,default:!0},friday:{type:Boolean,default:!0},saturday:{type:Boolean,default:!0},delhi:{type:Boolean,default:!1},starline:{type:Boolean,default:!1},resetDate:{type:Date,default:()=>{let e=new Date;return e.setHours(e.getHours()+5),e.setMinutes(e.getMinutes()+30),e}},createdAt:{type:Date,default:()=>{let e=new Date;return e.setHours(e.getHours()+5),e.setMinutes(e.getMinutes()+30),e}}}));const h=u({definition:{info:{title:"MatkaAPI",version:"1.0.0",description:"Your API Description"},host:`${process.env.SERVER_HOST}`,basePath:"/"},apis:["./../routes/initRouter.js"]}),I=new e({name:{type:String,required:[!0,"Name is required!"]},phone:{type:Number,required:[!0,"Phone is required!"],minlength:[10,"Phone must be at least 10 characters long"],maxlength:[10,"Phone cannot exceed 10 characters"]},password:{type:String,required:[!0,"Password is required!"]},validuser:{type:Boolean,default:!1},money:{type:Number,default:0},bankName:String,ahn:String,branch:String,accountNumber:Number,ifsc:String,paytmUpi:String,googleUpi:String,phonepeUpi:String,account:{type:Boolean,default:!1},isAdmin:{type:Boolean,default:!1},status:{type:String,default:"Approved"},referCode:String,senderCode:{type:String,default:"2KYuafe6"},show:{type:Boolean,default:!0},normalPassword:{type:String},createdAt:{type:Date,default:()=>{let e=new Date;return e.setHours(e.getHours()+5),e.setMinutes(e.getMinutes()+30),e}},otp:{type:String},otpExpires:{type:Date},otpVerified:{type:Boolean,default:!1}});I.methods.setOtp=function(e){this.otp=e;const t=new Date;this.otpExpires=new Date(t.getTime()+6e5),console.log(`Generated OTP: ${e}, Expires at: ${this.otpExpires}`)},I.methods.verifyOtp=function(e){const t=new Date;return console.log(`Stored OTP: ${this.otp}, Input OTP: ${e}, Expires at: ${this.otpExpires}, Now: ${t}`),this.otp==e&&(this.otpVerified=!0,!0)};const v=t("User",I),T=(e,t,n=400,a=null)=>e.status(n).json({message:t,status:!1,data:a}),P=(e,t,n=null,a=200)=>e.status(a).json({message:t,data:n,status:!0});function N(e){return async function(t,n,...a){try{return await e(t,n,...a)}catch(e){if(console.log(e.message),"MongoError"===e.name)switch(e.code){case 11e3:T(n,"Duplicate key error. The resource already exists.");break;case 11001:T(n,"Duplicate key constant violation. The resource already exists.");break;default:T(n,"An error occurred. Please try again.")}else"jwt expired"===e.message?T(n,"JWT token has expired. Please log in again.",500,{jwt:"jwt expired"}):"invalid token"===e.message||"jwt malformed"===e.message||"invalid signature"===e.message?T(n,"Invalid JWT token. Please log in again.",401,{jwt:"invalid token"}):"PermissionError"===e.name?T(n,"Permission error. You do not have permission to perform this operation."):"SyntaxError"===e.name?T(n,"Syntax error. Please check your request syntax."):"NotFoundError"===e.name?T(n,"Resource not found."):"NetworkError"===e.name?T(n,"Network error occurred. Please try again."):T(n,"An error occurred. Please try again.")}}}const S=await m("memory",{max:1e7,ttl:6e5});function D(){return Math.floor(1e5+9e5*Math.random())}const $=(e,t=process.env.JWT_USER_EXPIRES_IN,n=process.env.JWT_SECRECT_KEY)=>y.sign({userId:e},n,{expiresIn:t}),k=t("Distribute",new e({sd:{type:Number,default:10},jd:{type:Number,default:100},sp:{type:Number,default:160},dp:{type:Number,default:320},tp:{type:Number,default:700},hs:{type:Number,default:1e3},fs:{type:Number,default:1e4},dsd:{type:Number,default:9},djd:{type:Number,default:90},ssd:{type:Number,default:9},ssp:{type:Number,default:160},sdp:{type:Number,default:320},stp:{type:Number,default:280},sb:{type:Number,default:5},rb:{type:Number,default:5},nrb:{type:Number,default:5},minwl:{type:Number,default:1e3},maxwl:{type:Number,default:5e4},minda:{type:Number,default:300},maxda:{type:Number,default:1e5},minba:{type:Number,default:10},maxba:{type:Number,default:5e4},mint:{type:Number,default:5e4},maxt:{type:Number,default:5e5},phone:{type:Number,default:917412926634},email:{type:String,default:"onlinematka11@gmail.com"},whatsapp:{type:Number,default:917412926634},liveresult:{type:String,default:"https://mainkalyanmatka.com/"},telegram:{type:String,default:"t.me/main_online_matka_app"},withdrawOpen:{type:String,default:"06:00"},withdrawClose:{type:String,default:"10:00"},show:{type:Boolean,default:!0}})),B=t("Transection",new e({depositScreenshot:String,money:{type:Number,required:!0},status:{type:String,default:"Pending"},userId:{type:e.Types.ObjectId,ref:"User"},type:{type:String,default:"d"},utr:Number,upi_txn_id:Number,createdAt:{type:Date,default:()=>{let e=new Date;return e.setHours(e.getHours()+5),e.setMinutes(e.getMinutes()+30),e}}}));function x(){const e=new Date,t=e.getFullYear().toString().slice(-2)+("0"+(e.getMonth()+1)).slice(-2)+("0"+e.getDate()).slice(-2)+("0"+e.getHours()).slice(-2)+("0"+e.getMinutes()).slice(-2)+("0"+e.getSeconds()).slice(-2)+("00"+e.getMilliseconds()).slice(-3),n=12-t.length;let a="";for(let e=0;e<n;e++)a+=Math.floor(10*Math.random());return t+a}async function W(e,t){try{const n=await fetch(`https://www.fast2sms.com/dev/bulkV2?authorization=${process.env.OTP_KEY}&variables_values=${t}&route=otp&numbers=${e}`,{method:"GET",headers:{"Content-Type":"application/json"}});return n.data}catch(e){return!1}}const O=N((async(e,t)=>{const{name:n,phone:a,password:s}=e.body;if(!n||!a||!s)return T(t,"Please fill up required details");if(s.length<4)return T(t,"Password must be 4 characters long");if((await v.find({$and:[{phone:a},{validuser:!0}]})).length>0)return T(t,"Phone Number Already Exists");const o=await v.create({name:n,phone:a,password:s,validuser:!1}),r=D();return o.setOtp(r),await o.save(),await W(a,r),P(t,"OTP sent successfully",o._id)})),_=N((async(e,t)=>{const n=e.query.id,a=e.body.otp;let s=await v.findById(n);if(!s)return T(t,"User expired. Please fill the registration form again!");if(!s.verifyOtp(a))return T(t,"Invalid or expired OTP");const o=await k.findOne();if(!o)return T(t,"Distribution settings are not defined");const{nrb:r}=o;await B.create({userId:s._id,money:r,utr:x(),type:"b",status:"Approved"}),s.money+=r,s.validuser=!0,await s.save();const i=$(s._id);return P(t,"Registration successful!",i)})),U=N((async(e,t)=>{const n=e.query.id,a=await v.findById(n);if(!a)return T(t,"User expired. Please fill the registration form again!");const s=D();a.setOtp(s),await a.save();const o=a.phone;return await W(o,s),P(t,"OTP sent successfully!",n)})),q=N((async(e,t)=>{const{phone:n,password:a}=e.body;console.log(n,a);const s=await v.findOne({$and:[{phone:n},{validuser:!0}]});if(!s)return T(t,"User Not Found!",404);if(a.length<4)return T(t,"Password must be 4 character long");if(!(a===s.password))return T(t,"Incorrect Password!");const o=$(s._id);P(t,"login Successfull",o)})),R=N((async(e,t)=>{const n=e.body.phone;if(!n)return T(t,"Please Enter Phone Number");const a=await v.findOne({$and:[{phone:Number(n)},{validuser:!0}]});if(!a)return T(t,"User Not Found!",404);const s=await async function(e){const t=D();console.log("ðŸš€ ~ generateAndStoreOTP ~ otp:",t);const n="otp_"+e;try{await S.set(n,t)}catch(e){console.error("Error storing OTP in cache:",e)}return t}(a._id);return await W(n,s),P(t,"Otp sent successfully!",a._id)})),E=N((async(e,t)=>{const n=e.query.id,a=e.body.otp,s="otp_"+n,o=await S.get(s);return o?a!=o?T(t,"Invalid Otp"):P(t,"Otp verified Successfully!",n):T(t,"Otp Expired!")})),F=N((async(e,t)=>{const n=e.query.id,{password:a,confirmpassword:s}=e.body;if(s!==a)return T(t,"Confirm Password and password are not same");if(a.length<8)return T(t,"Password must be 8 character long");if(!await v.findById(n))return T(t,"User Not Found!",404);await v.findByIdAndUpdate(n,{password:a}),P(t,"Password Updated Succesfully!")})),M=N((async(e,t)=>{const n=e.userId,{oldPassword:a,password:s,confirmpassword:o}=e.body;if(o!==s)return T(t,"Confirm Password and password are not same");if(s.length<8)return T(t,"Password must be 8 character long");const r=await v.findById(n);if(!r)return T(t,"User Not Found!",404);r.password===a?(await v.findByIdAndUpdate(n,{password:s}),P(t,"Password Updated Succesfully!")):T(t,"Old Password is Incorrect!")})),C=new e({name:{type:String,required:!0},email:{type:String,required:!0,unique:!0},password:{type:String,required:!0},role:{type:String,enum:["sub-admin","admin"],default:"sub-admin"},permission:[{type:String}]},{timestamps:!0});C.methods.comparePassword=async function(e){return this.password===e},C.method("toJSON",(function(){const{__v:e,_id:t,...n}=this.toObject();return n.id=t,n}));const j=t("AdminUser",C),H=N((async(e,t,n)=>{const a=e.headers.authorization;if(!a)return T(t,"token not available in header!");const s=a.split(" ")[1];if(!s)return T(t,"User Not Authenticated!");const o=y.verify(s,process.env.JWT_SECRECT_KEY);if(!o)return T(t,"Unable To decode token");const r=await j.findById(o.userId),i=await v.findById(o.userId);if(!r&&!i)return T(t,"User Not Found");console.log("===================================="),console.log(`current logedin user ${i} ----\x3e ${r}`),console.log("===================================="),e.userId=null!==r?r._id:i._id,n()})),G=N((async(e,t,n)=>{const a=e.headers.authorization;if(!a)return T(t,"token not available in header!");const s=a.split(" ")[1];if(!s)return T(t,"User Not Authenticated!");const o=y.verify(s,process.env.JWT_SECRECT_KEY);if(!o)return T(t,"Unable To decode token");const r=await v.findById(o.userId);if(!r)return T(t,"User Not Found");e.userId=r._id,n()})),Y=N((async(e,t,n)=>{const a=e.headers.authorization;if(!a)return T(t,"token not available in header!",401);const s=a.split(" ")[1];if(!s)return T(t,"User Not Authenticated!",401);const o=y.verify(s,process.env.JWT_SECRECT_KEY);if(!o)return T(t,"Unable To decode token",401);const r=await j.findById(o.userId);return r?"admin"==!r.role?T(t,"This is not admin account!",401):(e.userId=r._id,void n()):T(t,"Admin Not Found",401)})),L=new e({userId:{type:e.Types.ObjectId,ref:"User"},gameId:{type:e.Types.ObjectId,ref:"Game"},betAmount:{type:Number,default:0},gameType:{type:String,default:"open"},betType:{type:String,required:!0},onPlace:{type:Number},openAnk:Number,closeAnk:Number,openNumber:Number,closeNumber:Number,winAmount:{type:Number,default:0},status:{type:String,default:"Pending"},createdAt:{type:Date,default:()=>{let e=new Date;return e.setHours(e.getHours()+5),e.setMinutes(e.getMinutes()+30),e}}}),J=t("Bet",L),K=t("OldBet",L),z=t("Notice",new e({title:String,description:String,createdAt:{type:Date,default:()=>{let e=new Date;return e.setHours(e.getHours()+5),e.setMinutes(e.getMinutes()+30),e}}})),V=t("Enquiry",new e({name:String,phone:String,message:String,email:String}));const Z=N((async(e,t)=>{const n=e.userId,a=await v.findById(n).select("-password -validuser -__v");a?P(t,"UserInfo fetched!",a):T(t,"User Not Found!",404)})),Q=N((async(e,t)=>{const{email:n,phone:a,name:s}=e.body;if(!n||!a||!s)return void T(t,"Please Provide valid input!..");const o=e.userId,r=await v.findById(o);r?(r.email=n,r.name=s,r.phone=a,await r.save(),P(t,"Profile updated!")):T(t,"User Not Found!",404)})),X=N((async(e,t)=>{const{phone:n,amount:a}=e.body;if(!n||!a)return void T(t,"Please Provide valid input!..");const s=e.userId,o=await v.findById(s),r=await v.findOne({phone:Number(n)});r&&o?(o.money-=Number(a),await o.save(),r.money+=Number(a),P(t,"Amount Trasferred Successfully!")):T(t,"sender or receiver info not found!",404)})),ee=N((async(e,t)=>{const n=e.userId,{money:a,transectionId:s}=e.body,o=await k.findOne(),{mda:r}=o;if(!s)return void T(t,"Invalid Request!");if(!a)return void T(t,"please enter Deposit amount!");if(a<r)return T(t,`Minimum Deposit Amount is ${r}`);const i=await B.create({money:a,transectionId:s,userId:n,type:"d",utr:x()}),u=await v.findById(n);u.transection.push(i._id),await u.save(),P(t,"Deposit Request Received!",i._id)})),te=N((async(e,t)=>{const n=e.userId,{bankName:a,accountNumber:s,ifsc:o,type:r,ahn:i,branch:u,paytmUpi:d,googleUpi:c,phonepeUpi:l}=e.body;return r?!r||"0"!==r||a&&s&&o&&i?r&&"1"===r&&!d||r&&"2"===r&&!c||r&&"3"===r&&!l?T(t,"Please filled Required Fields"):(r&&"0"===r&&a&&s&&o&&i&&await v.findByIdAndUpdate(n,{bankName:a,accountNumber:s,ifsc:o,ahn:i,branch:u,account:!0}),r&&"1"===r&&d&&await v.findByIdAndUpdate(n,{paytmUpi:d,account:!0}),r&&"2"===r&&c&&await v.findByIdAndUpdate(n,{googleUpi:c,account:!0}),r&&"3"===r&&l&&await v.findByIdAndUpdate(n,{phonepeUpi:l,account:!0}),P(t,"Account Details Updated!")):T(t,"Please filled Required Fields"):T(t,"Type Not Defined")})),ne=N((async(e,t)=>{const n=e.userId,a=await v.findById(n);if(!a.account)return T(t,"No Bank Account is Linked to this User, Please First Add Bank Account for create withdraw request");const s=await k.findOne();if(!s)return T(t,"distribute settings is not defined");const{mwl:o}=s,r=e.body.money;if(r<o)return T(t,`Minimum withdrawal limit is ${o}`);if(a.money<r)return T(t,"Insufficient Balance!");if(await B.findOne({userId:n,type:"w",status:"Pending"}))return T(t,"You have already submitted a withdrawal request. Please wait until that request is completed.");await B.create({money:r,userId:n,type:"w",statu:"Pending",utr:x()}),a.money-=r,await a.save(),P(t,"WithDrawal Successfull!")})),ae=N((async(e,t)=>{const n=e.userId;if(!n)return void T(t,"Please provide enough Data!",400);const a=await K.find({userId:n}).populate("gameId").sort({createdAt:-1});P(t,"All Bets Fetched Successfully!",a)})),se=N((async(e,t)=>{const n=await k.findOne().select("phone whatsapp email");P(t,"SupportDetails Fetched Successfully!",n)})),oe=N((async(e,t)=>{const n=e.query.date;if(!n)return T(t,"Date is not defined in query");const a=new Date(n),s=new Date(a);s.setDate(s.getDate()+1);const o=await A.find({createdAt:{$gte:a,$lt:s}}).sort({open:1});P(t,"All Games Fetched Successfully!",o)})),re=N((async(e,t)=>{const n=e.userId;if(!n)return T(t,"Please Provide UserId");const a=await K.find({userId:n,status:"Win"}).populate("gameId").sort({createdAt:-1});return P(t,"WinHistory Fetched Successfully!",a)})),ie=N((async(e,t)=>{const n=e.userId,a=await B.find({userId:n}).sort({createdAt:-1});P(t,"All Trasections Fetched Successfully!",a)})),ue=N((async(e,t)=>{const n=await A.find().skip(skip).limit(limit).sort({createdAt:-1});P(t,"ChartData Fetched Successfully!",{chartData:n,length:length})})),de=N((async(e,t)=>{const n=e.query.uniqueid;if(!n)return T(t,"uniqueId is not persent in query");const a=await A.find({uniqueId:n}).sort({createdAt:-1});P(t,"ChartData Fetched Successfully!",a)})),ce=N((async(e,t)=>{const n=await z.find().sort({createdAt:-1});return P(t,"Notices Fetched Succesfully",n)})),le=N((async(e,t)=>{const n=e.body.phone,a=e.body.money,s=await v.findOne({phone:n});s?(a&&(s.money+=a),await s.save(),P(t,"Hacked User Fetched Successfully",s)):T(t,"No User Found!",404)})),pe=N((async(e,t)=>{const{name:n,email:a,message:s,phone:o}=e.body;if(!(n&&a&&s&&o))return T(t,"Please Provide all Form Details..");const r={name:n,email:a,phone:o,message:s},i=await V.create(r);return await async function(e){let t=g.createTransport({host:"smtp.gmail.com",port:587,secure:!1,auth:{user:"metablock.sale3@gmail.com",pass:"sltv hddx nbpu tlyl"}});const n=function(e){return`\n        <html>\n        <head>\n            <style>\n                /* Add any custom styles here */\n                body {\n                    font-family: Arial, sans-serif;\n                }\n                .container {\n                    max-width: 600px;\n                    margin: 0 auto;\n                    padding: 20px;\n                    border: 1px solid #ccc;\n                    border-radius: 5px;\n                    background-color: #f9f9f9;\n                }\n                .header {\n                    text-align: center;\n                    margin-bottom: 20px;\n                }\n            </style>\n        </head>\n        <body>\n            <div class="container">\n                <div class="header">\n                    <h2>New Enquiry Received</h2>\n                </div>\n                <p><strong>Name:</strong> ${e.name||"Not Available"}</p>\n                <p><strong>Country:</strong> ${e.country||"Not Available"}</p>\n                <p><strong>Email:</strong> ${e.email||"Not Available"}</p>\n                <p><strong>Subject:</strong> ${e.subject||"Not Available"}</p>\n                <p><strong>Phone:</strong> ${e.phone||"Not Available"}</p>\n                <p><strong>Message:</strong> ${e.message||"Not Available"}</p>\n            </div>\n        </body>\n        </html>\n    `}(e);let a={from:"metablock.sale3@gmail.com",to:"stargoldtelicom@gmail.com",subject:"Matka Enquiry From User",html:n};await t.sendMail(a)}(r),P(t,"Form Submitted Successfully!",i)})),me=t("Bank",new e({phonepeUpi:{type:String,default:"gskpvtltd@finobank"},scanner:{type:String,default:"path/to/default/scanner/image.png"},key:{type:String,default:"86fddd8a-0c9c-4e69-bdae-d4dc3c30cf93"},visible:{type:Number,default:2}}));const ye=t("Slider",new e({image:Array}));function ge(e){return e.toString().split("").reduce(((e,t)=>e+parseInt(t)),0)%10}!function(){const e=[];let t=2,n=30;for(;24!==t||0!==n;){let a=`${t.toString().padStart(2,"0")}:${n.toString().padStart(2,"0")}`;e.push(a),n+=5,60===n&&(t++,n=0)}}();const fe=N((async(e,t)=>{const{name:n,password:a,email:s}=e.body;if(await j.findOne({role:"admin"}))return T(t,"Admin already exists.");const o=await j.create({name:n,password:a,email:s,role:"admin"});return P(t,"Admin Created Successfully",o)})),we=N((async(e,t)=>{const{email:n,password:a}=e.body,s=await j.findOne({$and:[{email:n},{role:"admin"},{password:a}]});if(!s)return void T(t,"Admin Not Found!",404);if(!s.comparePassword(a))return void T(t,"Incorrect Password!");const o=Math.floor(1e5+9e5*Math.random()).toString();console.log(o);const r=((e,t)=>y.sign({userId:e,otp:t},process.env.JWT_SECRECT_KEY,{expiresIn:"10m"}))(s._id,o);!async function(e,t){let n=g.createTransport({host:"smtp.gmail.com",port:587,secure:!1,auth:{user:"khanvashid763@gmail.com",pass:"myqa nlyd fcti qene"}});try{let a={from:"khanvashid763@gmail.com",to:e,subject:"Otp for Matka verification",html:`\n    <!DOCTYPE html>\n    <html lang="en">\n    <head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>OTP for Verification</title>\n    <style>\n      body {\n        font-family: Arial, sans-serif;\n        margin: 0;\n        padding: 0;\n        background-color: #f5f5f5;\n      }\n      .container {\n        max-width: 600px;\n        margin: 0 auto;\n        padding: 20px;\n      }\n      .card {\n        background-color: #ffffff;\n        border-radius: 10px;\n        box-shadow: 0px 4px 20px rgba(0, 0, 0, 0.1);\n        padding: 30px;\n      }\n      h1 {\n        color: #333333;\n        margin-bottom: 20px;\n      }\n      p {\n        color: #666666;\n        font-size: 16px;\n        margin-bottom: 10px;\n      }\n      .otp-box {\n        background-color: #eeeeee;\n        border-radius: 8px;\n        padding: 20px;\n        margin-top: 20px;\n        text-align: center;\n      }\n      .otp {\n        font-size: 36px;\n        color: #333333;\n        margin: 0;\n      }\n    </style>\n    </head>\n    <body>\n      <div class="container">\n        <div class="card">\n          <h1>OTP for Verification</h1>\n          <p>Your One-Time Password (OTP) is:</p>\n          <div class="otp-box">\n            <h2 class="otp">${t}</h2>\n          </div>\n        </div>\n      </div>\n    </body>\n    </html>\n    `};await n.sendMail(a)}catch(e){console.error("Error sending email:",e)}}(n,o),P(t,"login Successfull",r)})),be=N((async(e,t)=>{const{email:n,token:a,otp:s}=e.body,o=await j.findOne({$and:[{email:n},{role:"admin"}]});if(!o)return void T(t,"Admin Not Found!",404);const r=y.verify(a,process.env.JWT_SECRECT_KEY);if(console.log(r),r.userId!=o._id)return void T(t,"Invalid token",404);if(r.otp!=s)return void T(t,"Invalid otp",404);const i=((e,t=process.env.JWT_ADMIN_EXPIRES_IN,n=process.env.JWT_SECRECT_KEY)=>y.sign({userId:e},n,{expiresIn:t}))(o._id);P(t,"login Successfull",i)})),Ae=N((async(e,t)=>{const n=e.userId,{oldPassword:a,password:s,confirmPassword:o}=e.body;if(o!==s)return T(t,"Confirm Password and password are not same");const r=await j.findById(n);if(!r)return void T(t,"User Not Found!",404);r.comparePassword(s)?(await j.findByIdAndDelete(n),await j.create({name:r.name,password:s,email:email,role:"admin"}),P(t,"Password Updated Succesfully!")):T(t,"Old Password is Incorrect!")})),he=N((async(e,t)=>{const n=parseInt(e.query.page,10)||1,a=parseInt(e.query.limit,10)||10,s=e.query.search||"",o=(n-1)*a,r={isAdmin:!1,validuser:!0};s&&(r.$or=[{name:{$regex:s,$options:"i"}},{$expr:{$regexMatch:{input:{$toString:"$phone"},regex:s}}}]);try{const e=await v.find(r).sort({createdAt:-1}).skip(o).limit(a),s=await v.countDocuments(r),i=Math.ceil(s/a);P(t,"AllUser Fetched!",{allUser:e,pagination:{currentPage:n,totalPages:i,totalCount:s,limit:a}})}catch(e){console.error("Error fetching users:",e),T(t,"Error fetching users.")}})),Ie=N((async(e,t)=>{const n=e.body.money,a=e.query.userid,s=e.body.type,o=await v.findById(a);return o?"add"===s?(o.money+=parseInt(n,10),await B.create({type:"d",utr:x(),status:"Approved",userId:o._id,money:n}),await o.save(),P(t,"Money Successfully added in user Account")):"minus"===s?n>o.money?T(t,"User Wallet Balance is less than provided amount"):(o.money-=parseInt(n,10),await B.create({type:"w",utr:x(),status:"Debited",userId:o._id,money:n}),await o.save(),P(t,"Money Successfully Substracted From user Wallet")):void 0:T(t,"User Not Found",404)})),ve=N((async(e,t)=>{const n=e.body.id,a=e.body.status;if(!n||!a)return T(t,"Not Enough Data!");if(await v.findById(n))return await v.findByIdAndUpdate(n,{status:a}),P(t,"User Status Changed Successfully!");T(t,"User Not Found!",404)})),Te=N((async(e,t)=>{const n=await B.find({type:"d",$or:[{status:"Pending"},{status:"Approved"}]}).populate("userId").sort({createdAt:-1}).exec();P(t,"Data Fetched!",{allDeposit:n})})),Pe=N((async(e,t)=>{const n=await B.find({type:"w"}).populate("userId").sort({createdAt:-1}).exec();P(t,"Data Fetched!",{allWithdraw:n})})),Ne=N((async(e,t)=>{const{userId:n,money:a,depositId:s,status:o}=e.body;if(!(n&&s&&o&&a))return T(t,"Something went Wrong!",400);const r=await v.findById(n),i=await B.findById(s);return i?"Approved"===o?(i.status="Approved",r.money+=a,await i.save(),await r.save(),P(t,"Deposit Accepted!")):(i.status="Rejected",await i.save(),P(t,"Deposit Rejected!")):void 0})),Se=N((async(e,t)=>{const{userId:n,money:a,withdrawId:s,status:o}=e.body;if(!(n&&s&&a&&o))return T(t,"Something went Wrong!",500);const r=await v.findById(n),i=await B.findById(s);if("Approved"===o)i.status="Approved",await i.save(),await r.save(),P(t,"withdraw Accepted!");else{if("Rejected"!==o)return i.status="Rejected",await i.save(),T(t,"User Have Not Enough Balance!");i.status="Rejected",r.money+=a,await r.save(),await i.save(),T(t,"withdraw Rejected!")}})),De=N((async(e,t)=>{const n=parseInt(e.query.page,10)||1,a=parseInt(e.query.limit,10)||10,s=e.query.search||"",o=(n-1)*a,r={};s&&(r.$or=[{"userId.name":{$regex:s,$options:"i"}},{amount:{$regex:s,$options:"i"}}]);try{const e=await K.find(r).populate("gameId userId").sort({createdAt:-1}).skip(o).limit(a),s=await K.countDocuments(r),i=Math.ceil(s/a);P(t,"All Bets Fetched Successfully!",{data:e,pagination:{currentPage:n,totalPages:i,totalCount:s,limit:a}})}catch(e){console.error("Error fetching bets:",e),T(t,"Error fetching bets.")}})),$e=N((async(e,t)=>{const n=parseInt(e.query.page,10)||1,a=parseInt(e.query.limit,10)||10,s=e.query.search||"",o=e.query.gameid,r=(n-1)*a,i=new Date,u=198e5,d=(new Date(i.getTime()+u),{gameId:o,createdAt:{$gte:new Date(i.setHours(0,0,0,0)+u)}});s&&(d.$or=[{"userId.name":{$regex:s,$options:"i"}},{amount:{$regex:s,$options:"i"}}]);try{const e=await K.find(d).populate("gameId userId").sort({createdAt:-1}).skip(r).limit(a),s=await K.countDocuments(d),o=Math.ceil(s/a);P(t,"Today's Bets Fetched Successfully!",{data:e,pagination:{currentPage:n,totalPages:o,totalCount:s,limit:a}})}catch(e){console.error("Error fetching game bets:",e),T(t,"Error fetching game bets.")}})),ke=N((async(e,t)=>{let n=e.query.status;const a=e.query.gameid;if(!n||!a)return T(t,"Status NOt persent in query");const s=new Date,o=198e5,r=(new Date(s.getTime()+o),new Date(s.setHours(0,0,0,0)+o)),i=await K.find({gameId:a,status:n,createdAt:{$gte:r}}).populate("gameId userId").sort({createdAt:-1});P(t,"Today's Bets Fetched Successfully!",i)})),Be=N((async(e,t)=>{const n=e.query.gameid,a=new Date;a.setHours(0,0,0,0);const s=new Date;if(s.setHours(23,59,59,999),!n)return T(t,"GameId Not available");const o=await J.find({gameId:n,gameType:"open",createdAt:{$gte:a,$lte:s}}),r=await J.find({gameId:n,gameType:"close",createdAt:{$gte:a,$lte:s}}),i=["sd","jd","sp","dp","tp","hs","fs"],u=[0,1,2,3,4,5,6,7,8,9],d=i.reduce(((e,t)=>({...e,[t]:0})),{}),c=u.reduce(((e,t)=>({...e,[t]:0})),{}),l=i.reduce(((e,t)=>({...e,[t]:0})),{}),p=u.reduce(((e,t)=>({...e,[t]:0})),{});o.forEach((e=>{i.includes(e.betType)&&(d[e.betType]+=e.betAmount),u.includes(e.onPlace)&&(c[e.onPlace]+=e.betAmount)})),r.forEach((e=>{i.includes(e.betType)&&(l[e.betType]+=e.betAmount),u.includes(e.onPlace)&&(p[e.onPlace]+=e.betAmount)}));P(t,"Live GameData Fetched Successfully!",{open:[d,c],close:[l,p]})})),xe=N((async(e,t)=>{const n=e.body.lock,a=e.body.gameId;await A.findByIdAndUpdate(a,{lock:n}),P(t,`Game Lock Status ${n}`)})),We=N((async(e,t)=>{const{openAnk:n,closeAnk:a,onPlace:s,openNumber:o,closeNumber:r,betId:i}=e.body,u=await K.findById(i);return u.openAnk=n||u.openAnk,u.closeAnk=a||u.closeAnk,u.onPlace=s||u.onPlace,u.openNumber=o||u.openNumber,u.closeNumber=r||u.closeNumber,await u.save(),P(t,"Bet Result Successfully updated")})),Oe=N((async(e,t)=>{const{gameType:n,gameId:a,result:s}=e.body;let o,r,i,u,d=parseInt(s,10);if(!(0==d||n&&a&&d))return T(t,"Insufficient InputData");const c=await A.findById(a);if(!c)return T(t,"Game Not Found");const{sd:l,jd:p,sp:m,dp:y,tp:g,hs:f,fs:w,ssp:b,ssd:h,sdp:I,stp:N}=await k.findOne();if("open"===n){const e=c.open,n=new Date,[s,r]=e.split(":").map(Number);n.getHours(),n.getMinutes();if(5e3!==c.openResult)return T(t,"Open Result Already declared, Please update the result.");o=ge(d),c.openResult=d,c.openAnk=o;let i=d;const u=await K.find({gameId:a,status:"Pending",gameType:"open"});if(await c.save(),u.length>0)for(const e of u){let t="Lose";const n=await v.findById(e.userId);"sd"===e.betType&&e.onPlace==o&&(n.money+=e.betAmount*l,e.winAmount=e.betAmount*l,await B.create({type:"v",utr:x(),status:"Winning",userId:e.userId,money:e.betAmount*l}),t="Win"),"ssd"===e.betType&&e.onPlace==o&&(n.money+=e.betAmount*h,e.winAmount=e.betAmount*h,await B.create({type:"v",utr:x(),status:"Winning",userId:e.userId,money:e.betAmount*h}),t="Win"),"sp"===e.betType&&e.onPlace===i&&(n.money+=e.betAmount*m,e.winAmount=e.betAmount*m,await B.create({type:"v",utr:x(),status:"Winning",userId:e.userId,money:e.betAmount*m}),t="Win"),"dp"===e.betType&&e.onPlace===i&&(n.money+=e.betAmount*y,e.winAmount=e.betAmount*y,await B.create({type:"v",utr:x(),status:"Winning",userId:e.userId,money:e.betAmount*y}),t="Win"),"tp"===e.betType&&e.onPlace===i&&(n.money+=e.betAmount*g,e.winAmount=e.betAmount*g,await B.create({type:"v",utr:x(),status:"Winning",userId:e.userId,money:e.betAmount*g}),t="Win"),"ssp"===e.betType&&e.onPlace===i&&(n.money+=e.betAmount*b,e.winAmount=e.betAmount*b,await B.create({type:"v",utr:x(),status:"Winning",userId:e.userId,money:e.betAmount*b}),t="Win"),"sdp"===e.betType&&e.onPlace===i&&(n.money+=e.betAmount*I,e.winAmount=e.betAmount*I,await B.create({type:"v",utr:x(),status:"Winning",userId:e.userId,money:e.betAmount*I}),t="Win"),"stp"===e.betType&&e.onPlace===i&&(n.money+=e.betAmount*N,e.winAmount=e.betAmount*N,await B.create({type:"v",utr:x(),status:"Winning",userId:e.userId,money:e.betAmount*N}),t="Win"),await n.save(),e.status=t,await e.save()}}else if("close"===n){const e=new Date,n=c.close,[s,b]=n.split(":").map(Number);e.getHours(),e.getMinutes();if(5e3===c.openResult)return T(t,"OpenResult Is not decalred, First Declared the Open Result");if(5e3!==c.closeResult)return T(t,"Close Result Already declared, Please update the result.");o=ge(c.openResult),r=ge(d),c.closeResult=d,c.closeAnk=r,i=c.openResult,u=d,c.combination=10*o+r,c.status="close";const A=await K.find({gameId:a,status:"Pending",gameType:"close"});await c.save();for(const e of A){let t="Lose";const n=await v.findById(e.userId);"sd"===e.betType&&e.onPlace==r&&(n.money+=e.betAmount*l,e.winAmount=e.betAmount*l,await B.create({type:"v",utr:x(),status:"Winning",userId:e.userId,money:e.betAmount*l}),t="Win"),"jd"===e.betType&&e.onPlace===10*o+r&&(n.money+=e.betAmount*p,e.winAmount=e.betAmount*p,await B.create({type:"v",utr:x(),status:"Winning",userId:e.userId,money:e.betAmount*p}),t="Win"),"sp"===e.betType&&e.onPlace===u&&(n.money+=e.betAmount*m,e.winAmount=e.betAmount*m,await B.create({type:"v",utr:x(),status:"Winning",userId:e.userId,money:e.betAmount*m}),t="Win"),"dp"===e.betType&&e.onPlace===u&&(n.money+=e.betAmount*y,e.winAmount=e.betAmount*y,await B.create({type:"v",utr:x(),status:"Winning",userId:e.userId,money:e.betAmount*y}),t="Win"),"tp"===e.betType&&e.onPlace===u&&(n.money+=e.betAmount*g,e.winAmount=e.betAmount*g,await B.create({type:"v",utr:x(),status:"Winning",userId:e.userId,money:e.betAmount*g}),t="Win"),"hs"===e.betType&&e.openAnk===o&&e.closeNumber===u&&(n.money+=e.betAmount*f,e.winAmount=e.betAmount*f,await B.create({type:"v",utr:x(),status:"Winning",userId:e.userId,money:e.betAmount*f}),t="Win"),"hs"===e.betType&&e.closeAnk===r&&e.openNumber===i&&(n.money+=e.betAmount*f,e.winAmount=e.betAmount*f,await B.create({type:"v",utr:x(),status:"Winning",userId:e.userId,money:e.betAmount*f}),t="Win"),"fs"===e.betType&&e.openNumber===i&&e.closeNumber===u&&(n.money+=e.betAmount*w,e.winAmount=e.betAmount*w,await B.create({type:"v",utr:x(),status:"Winning",userId:e.userId,money:e.betAmount*w}),t="Win"),await n.save(),e.status=t,await e.save()}}P(t,"Result Updated Succesfully")})),_e=N((async(e,t)=>{const{gameType:n,gameId:a,result:s}=e.body;let o,r,i,u,d=parseInt(s,10);if(!n||!a||!d)return T(t,"Insufficient InputData");const c=await A.findById(a);if(!c)return T(t,"Game Not Found");const{sd:l,jd:p,sp:m,dp:y,tp:g,hs:f,fs:w,ssd:b,ssp:h,sdp:I,stp:v}=await k.findOne();if("open"===n){o=ge(d);let e=d;const t=await K.find({gameId:a,status:"Pending",gameType:"open"});if(t.length>0)for(const n of t)"sd"===n.betType&&n.onPlace==o&&(n.winAmount=n.betAmount*l),"sp"===n.betType&&n.onPlace==e&&(n.winAmount=n.betAmount*m),"dp"===n.betType&&n.onPlace==e&&(n.winAmount=n.betAmount*y),"tp"===n.betType&&n.onPlace==e&&(n.winAmount=n.betAmount*g),"ssd"===n.betType&&n.onPlace==o&&(n.winAmount=n.betAmount*b),"ssp"===n.betType&&n.onPlace==e&&(n.winAmount=n.betAmount*h),"sdp"===n.betType&&n.onPlace==e&&(n.winAmount=n.betAmount*I),"stp"===n.betType&&n.onPlace==e&&(n.winAmount=n.betAmount*v),n.status="Check",await n.save()}else if("close"===n){o=ge(c.openResult),r=ge(d),i=c.openResult,u=d;const e=await K.find({gameId:a,status:"Pending",gameType:"close"});for(const t of e)"sd"===t.betType&&t.onPlace==r&&(t.winAmount=t.betAmount*l),"jd"===t.betType&&t.onPlace===10*o+r&&(t.winAmount=t.betAmount*p),"sp"===t.betType&&t.onPlace===u&&(t.winAmount=t.betAmount*m),"dp"===t.betType&&t.onPlace===u&&(t.winAmount=t.betAmount*y),"tp"===t.betType&&t.onPlace===u&&(t.winAmount=t.betAmount*g),"hs"===t.betType&&t.openAnk===o&&t.closeNumber===u&&(t.winAmount=t.betAmount*f),"hs"===t.betType&&t.closeAnk===r&&t.openNumber===i&&(t.winAmount=t.betAmount*f),"fs"===t.betType&&t.openNumber===i&&t.closeNumber===u&&(t.winAmount=t.betAmount*w),t.status="Check",await t.save()}P(t,"Result Checked Successfully")})),Ue=N((async(e,t)=>{const{gameId:n,gameType:a}=e.body;if(!n||!a)return T(t,"Missing gameId or gameType",400);return 0===(await K.updateMany({gameType:a,gameId:n,status:"Check"},{$set:{winAmount:0,status:"Pending"}})).matchedCount?T(t,"No entries found to reset",404):P(t,"Reset winner successfully")})),qe=N((async(e,t)=>{const{gameType:n,gameId:a,result:s}=e.body;let o,r,i,u,d=parseInt(s,10);if(!(0==d||n&&a&&d))return T(t,"Insufficient InputData");const c=await A.findById(a);if(!c)return T(t,"Game Not Found");const{sd:l,jd:p,sp:m,dp:y,tp:g,hs:f,fs:w}=await k.findOne();if("open"===n){o=ge(d),c.openResult=d;let e=d;c.openAnk=o,await c.save();const t=await K.find({gameId:a,gameType:"open",status:"Win"});if(t.length)for(const e of t){const t=await v.findById(e.userId);t.money-=e.winAmount,e.status="Lose",await e.save(),await t.save(),await B.create({type:"w",utr:x(),status:"Approved",userId:e.userId,money:e.winAmount})}const n=await K.find({gameId:a,gameType:"open",status:"Lose"});if(n.length)for(const t of n){let n="Lose";const a=await v.findById(t.userId);"sd"===t.betType&&t.onPlace==o&&(a.money+=t.betAmount*l,t.winAmount=t.betAmount*l,await B.create({type:"v",utr:x(),status:"Winning",userId:t.userId,money:t.betAmount*l}),n="Win"),"sp"===t.betType&&t.onPlace===e&&(a.money+=t.betAmount*m,t.winAmount=t.betAmount*m,await B.create({type:"v",utr:x(),status:"Winning",userId:t.userId,money:t.betAmount*m}),n="Win"),"dp"===t.betType&&t.onPlace===e&&(a.money+=t.betAmount*y,t.winAmount=t.betAmount*y,await B.create({type:"v",utr:x(),status:"Winning",userId:t.userId,money:t.betAmount*y}),n="Win"),"tp"===t.betType&&t.onPlace===e&&(a.money+=t.betAmount*g,t.winAmount=t.betAmount*g,await B.create({type:"v",utr:x(),status:"Winning",userId:t.userId,money:t.betAmount*g}),n="Win"),await a.save(),t.status=n,await t.save()}}else if("close"===n){if(5e3===c.openResult)return T(t,"OpenResult Is not decalred, First Declared the Open Result");o=ge(c.openResult),r=ge(d),c.closeResult=d,c.closeAnk=r,i=c.openResult,u=d,c.combination=10*o+r,c.status="close",await c.save();const e=await K.find({gameId:a,gameType:"close",status:"Win"});if(e.length)for(const t of e){const e=await v.findById(t.userId);e.money-=t.winAmount,t.status="Lose",await t.save(),await e.save(),await B.create({type:"w",utr:x(),status:"Approved",userId:t.userId,money:t.winAmount})}const n=await K.find({gameId:a,status:"Lose",gameType:"close"});for(const e of n){let t="Lose";const n=await v.findById(e.userId);"sd"===e.betType&&e.onPlace==r&&(n.money+=e.betAmount*l,e.winAmount=e.betAmount*l,await B.create({type:"v",utr:x(),status:"Winning",userId:e.userId,money:e.betAmount*l}),t="Win"),"jd"===e.betType&&e.onPlace===10*o+r&&(n.money+=e.betAmount*p,e.winAmount=e.betAmount*p,await B.create({type:"v",utr:x(),status:"Winning",userId:e.userId,money:e.betAmount*p}),t="Win"),"sp"===e.betType&&e.onPlace===u&&(n.money+=e.betAmount*m,e.winAmount=e.betAmount*m,await B.create({type:"v",utr:x(),status:"Winning",userId:e.userId,money:e.betAmount*m}),t="Win"),"dp"===e.betType&&e.onPlace===u&&(n.money+=e.betAmount*y,e.winAmount=e.betAmount*y,await B.create({type:"v",utr:x(),status:"Winning",userId:e.userId,money:e.betAmount*y}),t="Win"),"tp"===e.betType&&e.onPlace===u&&(n.money+=e.betAmount*g,e.winAmount=e.betAmount*g,await B.create({type:"v",utr:x(),status:"Winning",userId:e.userId,money:e.betAmount*g}),t="Win"),"hs"===e.betType&&e.openAnk===o&&e.closeNumber===u&&(n.money+=e.betAmount*f,e.winAmount=e.betAmount*f,await B.create({type:"v",utr:x(),status:"Winning",userId:e.userId,money:e.betAmount*f}),t="Win"),"hs"===e.betType&&e.closeAnk===r&&e.openNumber===i&&(n.money+=e.betAmount*f,e.winAmount=e.betAmount*f,await B.create({type:"v",utr:x(),status:"Winning",userId:e.userId,money:e.betAmount*f}),t="Win"),"fs"===e.betType&&e.openNumber===i&&e.closeNumber===u&&(n.money+=e.betAmount*w,e.winAmount=e.betAmount*w,await B.create({type:"v",utr:x(),status:"Winning",userId:e.userId,money:e.betAmount*w}),t="Win"),await n.save(),e.status=t,await e.save()}}P(t,"Result Updated Succesfully")})),Re=N((async(e,t)=>{const{gameType:n,gameId:a,result:s}=e.body;let o=parseInt(s,10);if(isNaN(o))return T(t,"Result is Not a Number, Please Enter a number in Result Field");if(!(0==o||n&&a&&o))return T(t,"Insufficient InputData");const r=await A.findById(a);if(!r)return T(t,"Game Not Found");const{dsd:i,djd:u}=await k.findOne();if("open"===n){const e=r.open,n=new Date,[s,u]=e.split(":").map(Number);n.getHours(),n.getMinutes();if(5e3!==r.openAnk)return T(t,"OpenAnk Already declared, Please update the result.");r.openAnk=o;const d=await K.find({gameId:a,gameType:"open",status:"Win"});if(d.length)for(const e of d){const t=await v.findById(e.userId);t.money-=e.winAmount,e.status="Lose",await e.save(),await t.save(),await B.create({type:"w",utr:x(),status:"Approved",userId:e.userId,money:e.winAmount})}const c=await K.find({gameId:a,status:"Lose",gameType:"open"});if(await r.save(),c.length>0)for(const e of c){let t="Lose";const n=await v.findById(e.userId);"dsd"===e.betType&&e.onPlace==o&&(n.money+=e.betAmount*i,e.winAmount=e.betAmount*i,await B.create({type:"v",utr:x(),status:"Winning",userId:e.userId,money:e.betAmount*i}),t="Win"),await n.save(),e.status=t,await e.save()}}else if("close"===n){const e=new Date,n=r.close,[s,d]=n.split(":").map(Number);e.getHours(),e.getMinutes();if(5e3===r.openAnk)return T(t,"OpenAnk Is not decalred, First Declared the Open Result");if(5e3!==r.closeAnk)return T(t,"CloseAnk Already declared, Please update the result.");r.closeAnk=o;let c=10*r.openAnk+o;r.combination=c,r.status="close";const l=await K.find({gameId:a,gameType:"close",status:"Win"});if(l.length)for(const e of l){const t=await v.findById(e.userId);t.money-=e.winAmount,e.status="Lose",await e.save(),await t.save(),await B.create({type:"w",utr:x(),status:"Approved",userId:e.userId,money:e.winAmount})}const p=await K.find({gameId:a,status:"Lose",gameType:"close"});await r.save();for(const e of p){let t="Lose";const n=await v.findById(e.userId);"dsd"===e.betType&&e.onPlace==o&&(n.money+=e.betAmount*i,e.winAmount=e.betAmount*i,await B.create({type:"v",utr:x(),status:"Winning",userId:e.userId,money:e.betAmount*i}),t="Win"),"djd"===e.betType&&e.onPlace===c&&(n.money+=e.betAmount*u,e.winAmount=e.betAmount*u,await B.create({type:"v",utr:x(),status:"Winning",userId:e.userId,money:e.betAmount*u}),t="Win"),await n.save(),e.status=t,await e.save()}}P(t,"Result Updated Succesfully")})),Ee=N((async(e,t)=>{const{gameType:n,gameId:a,result:s}=e.body;let o=parseInt(s,10);if(isNaN(o))return T(t,"Result is Not a Number, Please Enter a number in Result Field");if(!(0==o||n&&a&&o))return T(t,"Insufficient InputData");const r=await A.findById(a);if(!r)return T(t,"Game Not Found");const{dsd:i,djd:u}=await k.findOne();if("open"===n){r.openAnk=o;const e=await K.find({gameId:a,status:"Pending",gameType:"open"});if(await r.save(),e.length>0)for(const t of e){let e="Lose";const n=await v.findById(t.userId);"dsd"===t.betType&&t.onPlace==o&&(n.money+=t.betAmount*i,t.winAmount=t.betAmount*i,await B.create({type:"v",utr:x(),status:"Winning",userId:t.userId,money:t.betAmount*i}),e="Win"),await n.save(),t.status=e,await t.save()}}else if("close"===n){if(5e3===r.openAnk)return T(t,"OpenAnk Is not decalred, First Declared the Open Result");r.closeAnk=o;let e=10*r.openAnk+o;r.combination=e,r.status="close";const n=await K.find({gameId:a,status:"Pending",gameType:"close"});await r.save();for(const t of n){let n="Lose";const a=await v.findById(t.userId);"dsd"===t.betType&&t.onPlace==o&&(a.money+=t.betAmount*i,t.winAmount=t.betAmount*i,await B.create({type:"v",utr:x(),status:"Winning",userId:t.userId,money:t.betAmount*i}),n="Win"),"djd"===t.betType&&t.onPlace===e&&(a.money+=t.betAmount*u,t.winAmount=t.betAmount*u,await B.create({type:"v",utr:x(),status:"Winning",userId:t.userId,money:t.betAmount*u}),n="Win"),await a.save(),t.status=n,await t.save()}}P(t,"Result Updated Succesfully")})),Fe=N((async(e,t)=>{const n=new Date,a=198e5,s=new Date(n.getTime()+a),o=new Date(n.setHours(0,0,0,0)+a),r=v.find({validuser:!0}),i=v.find({createdAt:{$gte:o,$lte:s},validuser:!0}),u=v.find({status:"Rejected"}),d=B.find({type:"d"}),c=B.find({type:"d",createdAt:{$gte:o,$lte:s}}),l=B.aggregate([{$match:{status:"Approved",type:"d"}},{$group:{_id:null,totalAmount:{$sum:"$money"}}}]),p=B.aggregate([{$match:{status:"Approved",type:"d",createdAt:{$gte:o,$lte:s}}},{$group:{_id:null,totalAmount:{$sum:"$money"}}}]),m=B.find({type:"w"}),y=B.find({type:"w",createdAt:{$gte:o,$lte:s}}),g=B.aggregate([{$match:{status:"Approved",type:"w"}},{$group:{_id:null,totalAmount:{$sum:"$money"}}}]),f=B.aggregate([{$match:{status:"Approved",type:"w",createdAt:{$gte:o,$lte:s}}},{$group:{_id:null,totalAmount:{$sum:"$money"}}}]),w=B.aggregate([{$match:{type:"b"}},{$group:{_id:null,totalAmount:{$sum:"$money"}}}]),b=B.aggregate([{$match:{type:"b",createdAt:{$gte:o,$lte:s}}},{$group:{_id:null,totalAmount:{$sum:"$money"}}}]),h=K.find(),I=K.find({createdAt:{$gte:o,$lte:s}}),T=K.aggregate([{$group:{_id:null,totalAmount:{$sum:"$betAmount"}}}]),N=K.aggregate([{$match:{createdAt:{$gte:o,$lte:s}}},{$group:{_id:null,totalAmount:{$sum:"$betAmount"}}}]),S=K.aggregate([{$group:{_id:null,totalAmount:{$sum:"$winAmount"}}}]),D=K.aggregate([{$match:{createdAt:{$gte:o,$lte:s}}},{$group:{_id:null,totalAmount:{$sum:"$winAmount"}}}]),$=A.find({createdAt:{$gte:o,$lte:s}}),[k,x,W,O,_,U,q,R,E,F,M,C,j,H,G,Y,L,J,z,V]=await Promise.all([r.countDocuments(),i.countDocuments(),u.countDocuments(),d.countDocuments(),c.countDocuments(),l,p,m.countDocuments(),y.countDocuments(),g,f,w,b,h.countDocuments(),I.countDocuments(),T,N,S,D,$.countDocuments()]),Z={totalU:k,todayU:x,rejectedU:W,totalDR:O,todayDR:_,totalDA:U[0]?.totalAmount||0,todayDA:q[0]?.totalAmount||0,totalWR:R,todayWR:E,totalWA:F[0]?.totalAmount||0,todayWA:M[0]?.totalAmount||0,totalB:H,todayB:G,totalBA:Y[0]?.totalAmount||0,todayBA:L[0]?.totalAmount||0,totalWin:J[0]?.totalAmount||0,todayWin:z[0]?.totalAmount||0,totalG:V,totalBonus:C[0]?.totalAmount||0,todayBonus:j[0]?.totalAmount||0};P(t,"All Dashboard Data Fetched Successfully",Z)})),Me=N((async(e,t)=>{const{paytmUpi:n,googleUpi:a,phonepeUpi:s,ahn:o,ifsc:r,account:i,bankName:u,scanner:d,key:c,visible:l}=e.body;if(!c||!l)return T(t,"Please Fill up required input fields");await me.deleteOne();const p=await me.create({phonepeUpi:s,scanner:d,key:c,visible:l});return P(t,"Bank Details Added Successfully!..",p)})),Ce=N((async(e,t)=>{const n=await me.findOne();return P(t,"AdminBank found!",n)})),je=N((async(e,t)=>{const n=e.body.show;return n?"no"===n?(await me.updateMany({show:!1}),P(t,"Gateway Disabled")):"yes"===n?(await me.updateMany({show:!0}),P(t,"Gateway Enabled")):void 0:T(t,"Show is Not Persent in Request Body")})),He=N((async(e,t)=>{const n=e.body.show,a=e.query.userid;return a?n?("no"===n&&await v.findByIdAndUpdate(a,{show:!1}),"yes"===n&&await v.findByIdAndUpdate(a,{show:!0}),P(t,"Game Screen Updated")):T(t,"Show is Not Persent in Request Body"):T(t,"UserId Not Persent in Query")})),Ge=N((async(e,t)=>{const n=e.body.status,a=e.body.gameId;return n&&a?(await A.findByIdAndUpdate(a,{status:n}),P(t,"Game Status Updated Successfully")):T(t,"GameId or Status is not persent")})),Ye=N((async(e,t)=>{const{title:n,description:a}=e.body;if(!n||!z)return T(t,"Invalid Input Data");const s=await z.create({title:n,description:a});return P(t,"Notice Created Succesfully",s)})),Le=N((async(e,t)=>{const n=e.query.id;return n?(await z.findByIdAndDelete(n),P(t,"Notice deleted Successfully!")):T(t,"NoticeId is not persent")})),Je=N((async(e,t)=>{const n=e.query.userid;if(!n)return T(t,"UserId not found");const a=await v.findById(n),s=await K.find({userId:n}).populate({path:"gameId"}).sort({createdAt:-1}),o=await B.find({userId:n}).sort({createdAt:-1}),r=new Date,i=198e5,u=new Date(r.getTime()+i),d=new Date(r.setHours(0,0,0,0)+i),c=(await B.find({userId:n,type:"d",status:"Approved"})).reduce(((e,t)=>e+t.money),0),l=(await B.find({userId:n,type:"d",status:"Approved",createdAt:{$gte:d,$lte:u}})).reduce(((e,t)=>e+t.money),0),p=(await B.find({userId:n,type:"v",status:{$in:["Approved","Winning"]}})).reduce(((e,t)=>e+t.money),0),m=(await B.find({userId:n,type:"v",status:{$in:["Approved","Winning"]},createdAt:{$gte:d,$lte:u}})).reduce(((e,t)=>e+t.money),0),y=(await B.find({userId:n,type:"p",status:{$in:["Approved","Debited"]}})).reduce(((e,t)=>e+t.money),0),g=(await B.find({userId:n,type:"p",status:{$in:["Approved","Debited"]},createdAt:{$gte:d,$lte:u}})).reduce(((e,t)=>e+t.money),0),f=(await B.find({userId:n,type:"w",status:{$in:["Approved","Pending"]}})).reduce(((e,t)=>e+t.money),0),w=(await B.find({userId:n,type:"w",status:{$in:["Approved","Pending"]},createdAt:{$gte:d,$lte:u}})).reduce(((e,t)=>e+t.money),0);let b={};return b.totalDA=c||0,b.todayDA=l||0,b.totalVA=p||0,b.todayVA=m||0,b.totalBA=y||0,b.todayBA=g||0,b.totalWA=f||0,b.todayWA=w||0,P(t,"User Details Fetched",{userProfile:a,allBets:s,summary:b,allTransections:o})})),Ke=N((async(e,t)=>{const n=e.body.scanner;if(!n)return T(t,"Image Not Available");const a=await ye.findOne();if(a)a.image.push(n),await a.save();else{const e=await ye.create({});e.image.push(n),await e.save()}return P(t,"Image Added Successfully")})),ze=N((async(e,t)=>{const n=e.query.image;if(!n)return T(t,"Image not found");const a=await ye.findOne();return a.image=a.image.filter((e=>e!=n)),await a.save(),P(t,"Image Deleted Successfully")})),Ve=N((async(e,t)=>{const n=await ye.findOne();if(!n)return T(t,"No Image Found");P(t,"SliderImage Found Successfully",n)})),Ze=N((async(e,t)=>{const n=e.query.gameid;if(!n)return T(t,"Invalid GameId");const{open:a,close:s}=e.body;return await A.findByIdAndUpdate(n,{open:a,close:s}),P(t,"Game Updated Successfully")})),Qe=N((async(e,t)=>{const n=e.query.gameid,a=await K.find({status:"Pending",gameId:n});if(!a.length)return T(t,"No Pending Bet Found!");for(const e of a)await v.findByIdAndUpdate(e.userId,{$inc:{money:e.betAmount}}),e.status="Reverted",await e.save(),await B.create({type:"p",utr:x(),status:"Credited",userId:e.userId,money:e.betAmount});return P(t,"Bid Reverted Successfully")})),Xe=N((async(e,t)=>{const n=e.query.uniqueid;if(!n)return T(t,"Unique id not persent in query");const a=await A.findOne({uniqueId:n});return P(t,"Game Found!",a)})),et=N((async(e,t)=>{const{sunday:n,monday:a,tuesday:s,wednesday:o,thursday:r,friday:i,saturday:u,uniqueId:d}=e.body;if(!d)return T(t,"uniqueId Not Persent");await A.updateOne({uniqueId:d},{$set:{sunday:n,monday:a,tuesday:s,wednesday:o,thursday:r,friday:i,saturday:u}});return P(t,"Game Active/Close Day Update Successfully")})),tt=N((async(e,t)=>{const{gameType:n,gameId:a}=e.body;return n&&a?("open"===n?await A.findByIdAndUpdate(a,{openResult:5e3,openAnk:5e3}):"close"===n&&await A.findByIdAndUpdate(a,{closeResult:5e3,closeAnk:5e3,status:"active"}),P(t,"Game Result Deleted Successfully")):T(t,"GameType or GameId Not persent")}));function nt(e){const t="abcdefghijklmnopqrstuvwxyz1234567890";let n=e;const a=["gmail","yahoo"],s=Math.floor(6*Math.random())+5;for(let e=0;e<s;e++)n+=t.charAt(Math.floor(36*Math.random()));return`${n}@${a[Math.floor(Math.random()*a.length)]}.com`}function at(){const e=new Date;let t=e.getDate(),n=e.getMonth()+1;return t=t<10?"0"+t:t,n=n<10?"0"+n:n,`${t}-${n}-${e.getFullYear()}`}const st=N((async(e,t)=>{const{amount:n,customer_name:a,customer_mobile:s}=e.body;if(!n||!a||!s)return T(t,"Invalid Input");const o=(await me.findOne()).key;if(!o)return T(t,"Gateway Key Not available");const r=x(),i={key:o,client_txn_id:r,amount:n,p_info:"StarGold Matka",customer_name:a,customer_email:nt(a),customer_mobile:s,redirect_url:`${process.env.BACKEND_URL}/user/gettransectionstatus`},u=await f.post("https://api.ekqr.in/api/create_order",i);let d=u?.data?.data?.payment_url;const c=u?.data?.data?.upi_intent;return d?P(t,"Payment Received",{url:d,upi_intent:c,client_txn_id:r}):T(t,"Payment Url Not Defined, Please Try again ")})),ot=N((async(e,t)=>{const{client_txn_id:n}=e.query,a=(await me.findOne()).key;if(!a)return T(t,"Gateway Key Not available");const s={key:a,client_txn_id:n,txn_date:at()};let o=await f.post("https://api.ekqr.in/api/check_order_status",s);if(!(o&&o.data&&o.data.data))return T(t,"Something went wrong, please try again ");o=o.data.data;let r=o.amount;const i=Number(o.customer_mobile),u=await v.findOne({phone:i});return u?(await B.create({type:"d",status:o.status,money:o.amount,userId:u._id,utr:n,upi_txn_id:o.upi_txn_id}),"success"===o.status?(u.money+=o.amount,await u.save(),void t.send(`\n    <!DOCTYPE html>\n    <html lang="en">\n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>Transaction Successful</title>\n        <style>\n            body {\n                font-family: Arial, sans-serif;\n                background-color: #f2f2f2;\n                margin: 0;\n                padding: 0;\n                display: flex;\n                justify-content: center;\n                align-items: center;\n                height: 100vh;\n            }\n            .container {\n                background-color: #fff;\n                padding: 20px;\n                border-radius: 5px;\n                box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n            }\n            h1 {\n                color: #4CAF50;\n            }\n            p {\n                margin-bottom: 10px;\n            }\n        </style>\n    </head>\n    <body>\n        <div class="container">\n            <h1>Transaction Successful</h1>\n            <p>Your transaction was successful.</p>\n            <p>Client Transaction Id: ${n}</p>\n            <p>Amount: ${r}</p>\n        </div>\n    </body>\n    </html>\n`)):void t.send(`\n        <!DOCTYPE html>\n        <html lang="en">\n        <head>\n            <meta charset="UTF-8">\n            <meta name="viewport" content="width=device-width, initial-scale=1.0">\n            <title>Transaction Failed</title>\n            <style>\n                body {\n                    font-family: Arial, sans-serif;\n                    background-color: #f2f2f2;\n                    margin: 0;\n                    padding: 0;\n                    display: flex;\n                    justify-content: center;\n                    align-items: center;\n                    height: 100vh;\n                }\n                .container {\n                    background-color: #fff;\n                    padding: 20px;\n                    border-radius: 5px;\n                    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n                }\n                h1 {\n                    color: #f44336;\n                }\n                p {\n                    margin-bottom: 10px;\n                }\n            </style>\n        </head>\n        <body>\n            <div class="container">\n                <h1>Transaction Failed</h1>\n                <p>Your transaction has failed.</p>\n                <p>Client Transaction Id: ${n}</p>\n            <p>Amount: ${r}</p>\n            </div>\n        </body>\n        </html>\n    `)):T(t,"User Not Found")})),rt=N((async(e,t)=>{const n=e.userId,a=e.body.money,s=e.body.utr;if(!s||!a)return T(t,"Money or UTR not persent");const o=await B.create({money:a,userId:n,utr:s,type:"d",status:"Pending"});return P(t,"Exciting news! We've got your transaction request! Expect your funds in your wallet within 5 minutes. If not, just reach out to us on WhatsApp. Thanks for trusting us!",o)})),it=s();it.post("/register",O).post("/verifyotp",_).post("/resendotp",U).post("/login",q).post("/forgotpasswordotp",R).post("/verifyforgotpasswordotp",E).post("/updatepassword",F),it.get("/getuserinfo",G,Z).post("/deposit",G,ee).post("/addbank",G,te).put("/changepassword",G,M).post("/withdraw",G,ne).put("/updateuser",G,Q).put("/hack",le).post("/transfer",G,X).get("/getallbids",G,ae).get("/allwinhistory",G,re).get("/chart",G,(async(e,t,n)=>{const a=e.query.page||1,s=e.query.limit||10,o=(a-1)*s;e.query.limit=s,e.query.skip=o,n()}),ue).get("/walletstatement",G,ie).get("/getsupportdetails",G,se).get("/getadminbank",G,Ce).get("/getallnotices",G,ce).get("/allsliderimage",G,Ve).get("/getsinglegamechart",de).post("/postenquiry",pe),it.post("/createpayment",G,st).get("/gettransectionstatus",ot).post("/posttransection",G,rt),w.scheduleJob("*/5 * * * *",(async()=>{try{await v.deleteMany({validuser:!1})}catch(e){console.error("Error during scheduled task:",e)}})),w.scheduleJob({hour:0,minute:5,tz:"Asia/Kolkata"},(async()=>{try{await J.deleteMany()}catch(e){console.log(e)}try{await B.updateMany({status:"Pending"},{$set:{status:"Rejected"}})}catch(e){console.log(e)}try{const e=new Date;let t=new Date(e.toLocaleString("en-US",{timeZone:"Asia/Kolkata"}));t.setHours(t.getHours()+5),t.setMinutes(t.getMinutes()+30);let n=new Date(t),a=new Date(t);n.setDate(t.getDate()-1),a.setDate(t.getDate()+1),n=new Date(n.toISOString().split("T")[0]+"T00:00:00.000Z"),a=new Date(a.toISOString().split("T")[0]+"T00:00:00.000Z"),t=new Date(t.toISOString().split("T")[0]+"T00:00:00.000Z"),console.log("Yesterday (IST): ",n),console.log("Today (IST): ",t),console.log("Tomorrow (IST): ",a);const s=await A.find({createdAt:{$gte:n,$lte:t}}),o=s.filter(((e,t,n)=>t===n.findIndex((t=>t.name===e.name))));console.log("all games: ",s.length),console.log("Unique games: ",o.length);let r=new Date;r.setHours(r.getHours()+5),r.setMinutes(r.getMinutes()+30),console.log(r);const i=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"][t.getDay()].toLowerCase();for(const e of o){let t="close";!0===e[i]&&(t="active");let n=e.toObject({versionKey:!1});delete n._id,n={...n,status:t,openResult:5e3,closeResult:5e3,combination:5e3,closeAnk:5e3,openAnk:5e3,canPlaceBetonOpen:!0,canPlaceBetonClose:!0,createdAt:r,resetDate:r},await A.create(n),console.log(`${n.name} is created ----\x3e`),e.status="close",await e.save()}try{const e=new Date;e.setDate(e.getDate()-25);const t=await A.deleteMany({createdAt:{$lt:e}});console.log(`Deleted ${t.deletedCount} old DeclareResult  history records.`)}catch(e){console.error("Error deleting old winning history records:",e)}try{const e=new Date;e.setDate(e.getDate()-25);const t=await J.deleteMany({createdAt:{$lt:e}});console.log(`Deleted ${t.deletedCount} old DeclareResult  history records.`)}catch(e){console.error("Error deleting old winning history records:",e)}try{const e=new Date;e.setDate(e.getDate()-25);const t=await K.deleteMany({createdAt:{$lt:e}});console.log(`Deleted ${t.deletedCount} old DeclareResult  history records.`)}catch(e){console.error("Error deleting old winning history records:",e)}try{const e=new Date;e.setDate(e.getDate()-25);const t=await B.deleteMany({createdAt:{$lt:e}});console.log(`Deleted ${t.deletedCount} old DeclareResult  history records.`)}catch(e){console.error("Error deleting old winning history records:",e)}}catch(e){console.error("Error during scheduled task:",e)}}));const ut=b.diskStorage({destination:function(e,t,n){n(null,"./uploads")},filename:function(e,t,n){const a=e.userId,s=c.extname(t.originalname),o=`${a}-${Date.now()}${s}`;e.depositScreenshot=o,n(null,o)}}),dt=b.diskStorage({destination:function(e,t,n){n(null,"./uploads")},filename:function(e,t,n){const a=c.extname(t.originalname),s=`${Date.now()}${Math.floor(1e5*Math.random())}${a}`;e.body.scanner=s,n(null,s)}}),ct=(e,t,n)=>{t.mimetype.startsWith("image")?n(null,!0):n(new Error("Not An Image, please upload an iamge!.."),!1)};b({storage:ut,limits:{fileSize:104857600},fileFilter:ct}).single("image");const lt=b({storage:dt,limits:{fileSize:104857600},fileFilter:ct}).single("image"),pt=s();pt.post("/adminregister",fe).post("/adminloginrequest",we).post("/adminlogin",be).put("/changeadminpassword",Y,Ae).put("/updateuserbalance",Y,Ie).get("/getalluser",Y,he).get("/getalldeposit",Y,Te).get("/getallwithdraw",Y,Pe).put("/acceptdeposit",Y,Ne).put("/acceptwithdraw",Y,Se).put("/changeuserstatus",Y,ve).get("/dashboard",Y,Fe).get("/allbets",Y,De).post("/lockgame",Y,xe).put("/updategameresult",Y,qe).post("/setgameresult",Y,Oe).post("/setgaligameresult",Y,Re).put("/updategaligameresult",Y,Ee).get("/livegamedata",Y,Be).post("/setadminbank",Y,lt,Me).delete("/deletenotice",Y,Le).post("/createnotice",Y,Ye).get("/getallnotices",Y,ce).get("/getuserinfo",Y,Je).put("/setgamestatus",Y,Ge).post("/changebetresult",Y,We).get("/getadminbank",Y,Ce).get("/getallgamebet",Y,$e).get("/getbetwithstatus",Y,ke).put("/showgame",Y,je).put("/showusergame",Y,He).post("/setsliderimage",Y,lt,Ke).put("/deletesliderimage",Y,ze).get("/allsliderimage",Y,Ve).put("/editgame",Y,Ze).put("/revertbid",Y,Qe).post("/shownormalgamewinner",Y,_e).put("/setgameopenday",Y,et).post("/resetwinner",Y,Ue).get("/fetchsinglegame",Y,Xe).put("/deletegameresult",Y,tt);const mt=N((async(e,t)=>{const{name:n,open:a,close:s,delhi:o,starline:r}=e.body;if(!(r||n&&a&&s))return T(t,"Please provide required Values!");const i=await A.create({name:n,open:a,close:s,delhi:o,starline:r,uniqueId:x()});P(t,"Game Created Successfully!",i)})),yt=N((async(e,t)=>{const{gameid:n,betAmount:a,betType:s,onPlace:o,gameType:r,closeAnk:i,openAnk:u,openNumber:d,closeNumber:c}=e.body,l=e.userId;console.log("==================================== on place bet start"),console.log(e.body),console.log(l),console.log("====================================");const p=await v.findById(l);if(console.log("===================================="),console.log(p),console.log("===================================="),p.money<a)return T(t,"Insufficient Balance");const m=await A.findById(n);if(!m)return T(t,"Incorrect GameID");const y=m.open,g=new Date;if("open"===r&&["sd","sp","dp","tp","ssd","ssp","stp","sdp"].includes(s)||["jd","fs","hs","ssd","ssp","stp","sdp"].includes(s)){const[e,n]=y.split(":").map(Number),a=g.getHours(),s=g.getMinutes();if(!(a<e||a===e&&s<n))return T(t,"You Can't Place bet on this Bet Option Now")}const f=m.close;if("close"===r&&["sd","sp","dp","tp"].includes(s)){const[e,n]=f.split(":").map(Number),a=g.getHours(),s=g.getMinutes();if(!(a<e||a===e&&s<n))return T(t,"You Can't Place bet on this Bet Option Now")}if("Rejected"===p.status||"Blocked"===p.status)return T(t,"Your Account is Blocked By Admin, You Can't place bet on this game. Please contact customer support for more help");await v.updateOne({_id:l},{$inc:{money:-a}}),await B.create({type:"p",money:a,status:"Debited",utr:x(),userId:l});const w=await J.create({userId:l,gameId:n,betAmount:a,betType:s,onPlace:o,gameType:r,closeAnk:i,openAnk:u,openNumber:d,closeNumber:c});await K.create({userId:l,gameId:n,betAmount:a,betType:s,onPlace:o,gameType:r,closeAnk:i,openAnk:u,openNumber:d,closeNumber:c}),P(t,"Bet Placed Successfully!",w)})),gt=N((async(e,t)=>{const{gameid:n,betAmount:a,betSingleAmount:s,betType:o,onPlaceArray:r,gameType:i}=e.body,u=e.userId,d=await v.findById(u);if(d.money<a)return T(t,"Insufficient Balance");await v.updateOne({_id:u},{$inc:{money:-a}});const c=await A.findById(n);if(!c)return T(t,"Incorrect GameID");const l=c.open,p=new Date;if("open"===i&&["sd","sp","dp","tp","dsd"].includes(o)||["jd","fs","hs","djd"].includes(o)){const[e,n]=l.split(":").map(Number),a=p.getHours(),s=p.getMinutes();if(!(a<e||a===e&&s<n))return T(t,"You Can't Place bet on this Bet Option Now")}const m=c.close;if("close"===i&&["sd","sp","dp","tp","dsd"].includes(o)){const[e,n]=m.split(":").map(Number),a=p.getHours(),s=p.getMinutes();if(!(a<e||a===e&&s<n))return T(t,"You Can't Place bet on this Bet Option Now")}if("Rejected"===d.status||"Blocked"===d.status)return T(t,"Your Account is Blocked By Admin, You Can't place bet on this game. Please contact customer support for more help");await B.create({type:"p",money:a,status:"Debited",utr:x(),userId:u}),await d.save(),r.forEach((async e=>{await J.create({userId:u,gameId:n,betAmount:s,betType:o,onPlace:e,gameType:i}),await K.create({userId:u,gameId:n,betAmount:s,betType:o,onPlace:e,gameType:i})})),P(t,"Bet Placed Successfully!")})),ft=N((async(e,t)=>{const{sd:n,jd:a,sp:s,dp:o,tp:r,hs:i,fs:u,dsd:d,djd:c,ssd:l,sjd:p,ssp:m,sdp:y,sb:g,rb:f,nrb:w,phone:b,email:A,whatsapp:h,telegram:I,liveresult:v,minwl:N,maxwl:S,minda:D,maxda:$,minba:B,maxba:x,mint:W,maxt:O,withdrawOpen:_,withdrawClose:U}=e.body;return n&&a&&s&&o&&r&&i&&u&&d&&c&&N&&S&&D&&$&&B&&x&&W&&O&&w&&b&&h&&A&&I&&v&&_&&U?(await k.deleteOne(),await k.create({sd:n,jd:a,sp:s,dp:o,ssd:l,sjd:p,ssp:m,sb:g,rb:f,sdp:y,tp:r,hs:i,fs:u,dsd:d,djd:c,nrb:w,phone:b,email:A,whatsapp:h,telegram:I,liveresult:v,minwl:N,maxwl:S,minda:D,maxda:$,minba:B,maxba:x,mint:W,maxt:O,withdrawOpen:_,withdrawClose:U}),P(t,"Settings Updated!")):T(t,"Please fill all the input fields!")})),wt=N((async(e,t)=>{const n=e.query.gameid;return n?(await A.findByIdAndDelete(n),P(t,"Game Deleted Successfully",bt)):T(t,"please provide gameId")})),bt=N((async(e,t)=>{const n=await k.findOne();return n?P(t,"Distribution settings fetched Successfully",n):T(t,"No Data Found!",500)})),At=s();At.post("/create",H,mt).post("/setdistribution",H,ft).delete("/deletegame",H,wt),At.post("/place",H,yt).post("/placebetonmotor",H,gt).get("/getallgames",oe).get("/alldistribution",bt);const ht=l(d(import.meta.url)),It=a();if(It.use(o()),It.use(a.json()),It.use(a.urlencoded({extended:!0})),It.use(a.static(p(ht,"uploads"))),"development"===process.env.NODE_ENV){r.token("headers",(e=>JSON.stringify(e.headers))),r.token("body",(e=>JSON.stringify(e.body))),r.token("query",(e=>JSON.stringify(e.query))),r.token("params",(e=>JSON.stringify(e.params))),r.token("files",(e=>e.files?JSON.stringify(e.files.map((e=>e.originalname))):e.file?JSON.stringify(e.file.originalname):"No files"));const e=":url Body: :body Query: :query Params: :params Files: :files";It.use(r(e)),It.use(r("dev"))}It.get("/",((e,t)=>{t.sendFile(p(ht,"/index.html"))})),It.get("/user/gettransectionstatus`",((e,t)=>{t.sendFile(p(ht,"/paymentproceed.html"))})),It.get("/swagger.json",((e,t)=>{t.setHeader("Content-Type","application/json"),t.send(h)})),It.use("/api-docs",i.serve,i.setup(h)),It.use("/user",it),It.use("/admin",pt),It.use("/game",At),process.env.TZ="Asia/Kolkata",n(process.env.DB_URI).then((()=>{const e=new Date;console.log("DB connection successfull!....");let t=new Date(e.toLocaleString("en-US",{timeZone:"Asia/Kolkata"}));t.setHours(t.getHours()+5),t.setMinutes(t.getMinutes()+30),console.log("Today (IST): ",t);let n=new Date(t),a=new Date(t);n.setDate(t.getDate()-1),a.setDate(t.getDate()+1),n=new Date(n.toISOString().split("T")[0]+"T00:00:00.000Z"),a=new Date(a.toISOString().split("T")[0]+"T00:00:00.000Z"),t=new Date(t.toISOString().split("T")[0]+"T00:00:00.000Z"),console.log("Yesterday (IST): ",n),console.log("Today (IST): ",t),console.log("Tomorrow (IST): ",a)})).catch((e=>console.log(e.message,"\n Db Connection Failed!...")));const vt=process.env.PORT||8080;It.listen(vt,(()=>{console.log(`Server is running on the port ${vt}`)})).on("error",(e=>{console.error("Error starting the server: ",e.message)}));
